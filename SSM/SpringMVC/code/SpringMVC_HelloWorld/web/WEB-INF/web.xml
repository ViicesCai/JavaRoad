<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!-- web项目参数配置 -->
    <context-param>
        <!-- 整个web项目的配置文件位置 -->
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:conf/applicationContext.xml</param-value>
    </context-param>
    <!-- 监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--
        SpringMVC：有一个前端控制器能拦截所有请求，并智能派发
        该前端控制器是一个Servlet需要在web.xml中进行配置
        默认的Servlet是在收到请求后创建的，前端控制器在服务器启动时就创建了
    -->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 前端控制器的初始化参数 -->
        <init-param>
            <!-- 指定文件配置位置 -->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:conf/dispatcher-servlet.xml</param-value>
        </init-param>
        <!-- Servlet启动加载：load-on-startup：服务器启动时创建，值越小越优先 -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <!-- 拦截所有请求 -->
        <!--
            /与/*的区别：
            /*：范围更大，会拦截到如：*.jsp的请求：这样会导致页面无法显示
            /：会拦截所有请求，但不会拦截*.jsp
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>